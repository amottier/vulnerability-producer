/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.db;

import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import org.dizitart.no2.IndexType;
import org.dizitart.no2.objects.Id;
import org.dizitart.no2.objects.Index;
import org.dizitart.no2.objects.Indices;

import java.io.Serializable;
import java.util.Objects;

/**
 * Mapper Object to store in the collection of vulnerabilities.
 * Find examples on how to use Nitrite here: https://github.com/nitrite/nitrite-java
 */
@Indices({
        @Index(value = "id", type = IndexType.Unique)
})
public class VulnerabilityObject implements Serializable {
    @Id
    String id;
    Vulnerability vulnerability;

    public VulnerabilityObject() {
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Vulnerability getVulnerability() {
        return vulnerability;
    }

    public void setVulnerability(Vulnerability vulnerability) {
        this.vulnerability = vulnerability;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        VulnerabilityObject that = (VulnerabilityObject) o;
        return id.equals(that.id) &&
                vulnerability.equals(that.vulnerability);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, vulnerability);
    }
}
