/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import eu.fasten.vulnerabilityproducer.db.NitriteController;
import eu.fasten.vulnerabilityproducer.db.PatchObject;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import eu.fasten.vulnerabilityproducer.utils.connections.MongoConnector;
import org.apache.commons.lang3.StringUtils;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.jooq.tools.json.JSONObject;
import org.jooq.tools.json.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

import static com.mongodb.client.model.Filters.and;
import static com.mongodb.client.model.Filters.eq;

/**
 * This class has the responsibility to handle references and crawl for commits.
 * Those will lead to diffs that will lead to changed files.
 * Those files will be considered vulnerable since they needed changes in order
 */
public class PatchFarmer {

    public static JSONParser jsonParser;
    public static MongoCollection<Document> mongoCommitsCollection;
    public static MongoCollection<Document> mongoPullRequestsCollection;
    public static MongoCollection<Document> mongoIssuesCollection;
    public static JavaHttpClient httpClient;
    private final Logger logger = LoggerFactory.getLogger(PatchFarmer.class.getName());

    /**
     * Takes a MongoDatabase object to connect and retrieve collections from.
     */
    public PatchFarmer(MongoDatabase db, JavaHttpClient client) {
        httpClient = client;
        jsonParser = new JSONParser();
        mongoCommitsCollection = db.getCollection("commits");
        mongoPullRequestsCollection = db.getCollection("pull_requests");
        mongoIssuesCollection = db.getCollection("issues");
    }

    /**
     * Extracts information from Pull Request links.
     * First queries GHTorrent and if nothing is found use Github API
     *
     * @param vulnerability object to inject information
     * @param pr            github link to the pull request
     * @return
     */
    public HashSet<Vulnerability.Patch> parsePullRequest(Vulnerability vulnerability, String pr) {
        logger.info("Parsing pull request with URL: " + pr);
        String jsonBody = null;
        HashSet<Vulnerability.Patch> vp = new HashSet<>();
        try {
            // Extract information from the patch and create API Link
            String[] infoPatch = pr.split("/");
            String repoOwner = infoPatch[3];
            String repoName = infoPatch[4];
            String prNumber = infoPatch[6];
            // Query GHTorrent to find the corresponding Pull Request
            Bson filter = and(eq("repo", repoName),
                    eq("owner", repoOwner),
                    eq("number", prNumber));
            FindIterable<Document> mongoElement = mongoPullRequestsCollection.find(filter);
            if (mongoElement.first() != null) {
                jsonBody = mongoElement.first().toJson();
            }

            // If GhTorrent does not find it, query Github API
            if (jsonBody == null) {
                String apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/pulls/" + prNumber;
                // Send GET request
                jsonBody = httpClient.sendGet(apiLink);
                if (jsonBody.contains("\"message\": \"Not Found\"")) {
                    return vp;
                }
                // TODO: If it was not on GHTorrent, write it in there (?)
            }

            // Look for a merge_commit_sha and use the parseCommit function
            // Parse the result and extract data
            JSONParser jsonParser = new JSONParser();
            Object obj = jsonParser.parse(jsonBody);
            JSONObject payload = (JSONObject) obj;
            if (payload.get("merge_commit_sha") != null) {
                // There is a commit we can parse
                String mergeCommitSHA = (String) payload.get("merge_commit_sha");
                String urlCommit = "https://github.com/" + repoOwner + "/" + repoName + "/commit/" + mergeCommitSHA;
                vp = this.parseCommit(vulnerability, urlCommit);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return vp;
    }

    /**
     * Method parses Github issues links found in the vulnerability references.
     *
     * @param vulnerability - to inject information into
     * @param issue         - link of the issue e.g. https://github.com/restlet/restlet-framework-java/issues/774
     *                      <p>
     *                      The script looks for a pull_request field in the json corresponding to the issue.
     *                      "pull_request": {
     *                      "url": "https://api.github.com/repos/python/cpython/pulls/32",
     *                      "html_url": "https://github.com/python/cpython/pull/32",
     *                      "diff_url": "https://github.com/python/cpython/pull/32.diff",
     *                      "patch_url": "https://github.com/python/cpython/pull/32.patch"
     *                      }
     * @return
     */
    public HashSet<Vulnerability.Patch> parseIssues(Vulnerability vulnerability, String issue) {
        logger.info("Parsing issue with URL: " + issue);
        String jsonBody = null;
        HashSet<Vulnerability.Patch> vp = new HashSet<>();
        try {
            // Extract information from the patch and create API Link
            String[] infoPatch = issue.split("/");
            String repoOwner = infoPatch[3];
            String repoName = infoPatch[4];
            String issueNumber = infoPatch[6];
            // Query GHTorrent to find the corresponding Pull Request
            FindIterable<Document> mongoElement = mongoIssuesCollection.find(and(eq("repo", repoName),
                    eq("owner", repoOwner), eq("number", issueNumber)));
            if (mongoElement.first() != null) {
                jsonBody = mongoElement.first().toJson();
            }
            // If GhTorrent does not find it, query Github API
            if (jsonBody == null) {
                String apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/issues/" + issueNumber;
                // Send GET request
                jsonBody = httpClient.sendGet(apiLink);
                if (jsonBody.contains("\"message\": \"Not Found\"")) {
                    return vp;
                }
                // TODO: If it was not on GHTorrent, write it in there (?)
            }

            // Look for a pull_request and use the parsePullRequest function
            // Parse the result and extract data
            JSONParser jsonParser = new JSONParser();
            Object obj = jsonParser.parse(jsonBody);
            JSONObject payload = (JSONObject) obj;
            if (payload.get("pull_request") != null) {
                // There is a commit we can parse
                JSONObject pullRequest = (JSONObject) payload.get("pull_request");
                String urlPullRequest = (String) pullRequest.get("html_url");
                vp = this.parsePullRequest(vulnerability, urlPullRequest);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return vp;
    }

    /**
     * Parses patch links to git commits using GitHub API v3.
     * Extracts the following information:
     * - files changed
     * - methods affected
     * - days it took to fix
     *
     * @param vulnerability object to inject information
     * @param patchLink     URL to the git commit
     */
    public HashSet<Vulnerability.Patch> parseCommit(Vulnerability vulnerability, String patchLink) {
        logger.info("Parsing commit with URL: " + patchLink);
        String jsonBody = null;
        HashSet<Vulnerability.Patch> vp = new HashSet<>();
        try {
            // Extract information from the patch and create API Link
            String[] infoPatch = patchLink.split("/");
            String commitHash = infoPatch[6];
            // Query GHTorrent with the hash of the commit
            FindIterable<Document> mongoElement = mongoCommitsCollection.find(eq("sha", commitHash));
            if (mongoElement.first() != null) {
                jsonBody = mongoElement.first().toJson();
            }

            // If GHTorrent does not find it, query Github API
            if (jsonBody == null) {
                String repoOwner = infoPatch[3];
                String repoName = infoPatch[4];
                String apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/commits/" + commitHash;
                // Send GET request
                jsonBody = httpClient.sendGet(apiLink);
                if (jsonBody.contains("\"message\": \"Not Found\"")) {
                    return vp;
                }
            }

            // Parse the result and extract data
            JSONParser jsonParser = new JSONParser();
            Object obj = jsonParser.parse(jsonBody);
            JSONObject payload = (JSONObject) obj;
            JSONObject commit = (JSONObject) payload.get("commit");
            JSONObject author = (JSONObject) commit.get("author");
            String date = (String) author.get("date");
            List<Object> files = (List<Object>) payload.get("files");
            for (Object file : files) {
                JSONObject fileObj = (JSONObject) file;
                String filenameChanged = (String) fileObj.get("filename");
                if (fileObj.get("patch") != null) {
                    List<Integer> hunks = getPatchHunks(fileObj.get("patch").toString());
                    Vulnerability.Patch p = new Vulnerability.Patch(filenameChanged, date, hunks);
                    vp.add(p);
                    vulnerability.addPatch(p);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return vp;
    }

    /**
     * Extracts the hunks from the commit information.
     *
     * @param patch     - String representing the patch information
     * @return
     */
    public static List<Integer> getPatchHunks(String patch) {
        List<Integer> linesAffected = new ArrayList<>();
        String[] linesPatch = patch.split("\n");
        for (int i = 0; i < linesPatch.length; i++) {
            String hunk = StringUtils.substringBetween(linesPatch[i], "@@");
            if (hunk != null) {
                String s = hunk.split("-")[1].split(" \\+")[0];
                if (s.contains(",")) s = s.substring(0, s.indexOf(","));

                String t = hunk.split("\\+")[1].split(",")[0];

                int fromLineNumber = Integer.parseInt(s);
                int toLineNumber = Integer.parseInt(t);

                // Check if the file was deleted (aka: toLineNumber is 0)
                if (toLineNumber == 0) continue;

                // Check if the file was created (aka: fromLineNumber is 0)
                if (fromLineNumber == 0) continue;

                // Go through the next lines looking for + or - and keep going until you find something different
                int j = i + 1;
                boolean currPatch = true;
                int lineChanged = -1;
                int counterLineChanges = 0;

                while (j < linesPatch.length && currPatch) {
                    // This is the first + or - we see
                    if (lineChanged < 0 && (linesPatch[j].charAt(0) == '+' || linesPatch[j].charAt(0) == '-')) {
                        lineChanged = fromLineNumber + j - i - 2 - counterLineChanges;
                    }

                    if (lineChanged > 0 && (linesPatch[j].charAt(0) == '+' || linesPatch[j].charAt(0) == '-')) {
                        counterLineChanges += 1;
                    }

                    // There are no more changes in this hunk
                    if (lineChanged >= 0 && ((linesPatch[j].charAt(0) != '+' && linesPatch[j].charAt(0) != '-') || j == linesPatch.length - 1)) {
                        // Add the affected line
                        linesAffected.add(lineChanged);
                        // Reset the lineChanged holder
                        lineChanged = -1;
                    }

                    // Check if the next is another patch
                    currPatch = StringUtils.substringBetween(linesPatch[j], "@@") == null;
                    if (!currPatch)  i = j - 2;
                    j += 1;
                }
            }
        }
        return linesAffected;
    }

    /**
     * Parse all the references looking for diffs.
     *
     * @param vulnerability to parse references and inject info.
     */
    public void parseReferences(Vulnerability vulnerability, NitriteController nc) {
        // Parse all patches and references, scouting for diffs
        HashSet<String> links = vulnerability.getReferences();
        links.addAll(vulnerability.getPatchLinks());
        for (String ref : vulnerability.getReferences()) {
            // First look into Nitrite if the ref was already parsed before
            Optional<HashSet<Vulnerability.Patch>> queryFromNC = nc.findPatchEntry(ref);
            if (!queryFromNC.isEmpty()) {
                for (Vulnerability.Patch vp : queryFromNC.get()) {
                    vulnerability.addPatch(vp);
                }
                continue;
            } else {
                HashSet<Vulnerability.Patch> vp = null;
                // Case 1: Git commit
                if (ref.matches("https://github\\.com/.*/.*/commit/.*")) {
                    vp = parseCommit(vulnerability, ref);
                    if (vp.size() > 0) {
                        PatchObject po = new PatchObject();
                        po.setPatchURL(ref);
                        po.setFilesChanged(vp);
                        nc.insertPatch(po);
                    }
                }
                // Case 2: Git Pull request
                if (ref.matches("https://github\\.com/.*/.*/pull/.*")) {
                    vp = parsePullRequest(vulnerability, ref);
                    if (vp.size() > 0) {
                        PatchObject po = new PatchObject();
                        po.setPatchURL(ref);
                        po.setFilesChanged(vp);
                        nc.insertPatch(po);
                    }
                }
                // Case 3: Git Issues
                if (ref.matches("https://github\\.com/.*/.*/issues/.*")) {
                    vp = parseIssues(vulnerability, ref);
                    if (vp.size() > 0) {
                        PatchObject po = new PatchObject();
                        po.setPatchURL(ref);
                        po.setFilesChanged(vp);
                        nc.insertPatch(po);
                    }
                }
                if (vp != null && vp.size() > 0) {
                    logger.info("Found " + vp.size() + " changed files for reference " + ref);
                    for (Vulnerability.Patch p : vp) {
                        vulnerability.addPatch(p);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        String patchLink = "https://github.com/dom4j/dom4j/commit/a8228522a99a02146106672a34c104adbda5c658";

        MongoDatabase md = MongoConnector.getMongoCollection("127.0.0.1", "ghtorrent", "admin", "github");
        PatchFarmer pf = new PatchFarmer(md, new JavaHttpClient());

        pf.parseCommit(new Vulnerability("PATCH-TESTER"), patchLink);
    }
}
